# Generated by Django 4.2.24 on 2025-10-01 15:39

from django.db import migrations
from django.core.files.storage import default_storage
import sys
from ..utils import delete_directory


def delete_orphaned_attachments(apps, schema_editor):
    """Remove all attachments not associated with an application"""

    # TODO: This solution is not ideal but due to our unit tests writing to the filesystem
    #       this can cause files belonging to the dev's local server to be deleted. Until
    #       these can be better isolated, this signal will do nothing when pytest is running
    if "pytest" in sys.modules:
        return

    ApplicationSubmission = apps.get_model("funds", "ApplicationSubmission")

    submission_attachment_path = "submission"

    folders_to_delete = []
    folders_to_check = []

    if not default_storage.exists(submission_attachment_path):
        # If specified path doesn't exist, ignore
        # edge case that typically comes up in tests
        return

    for folder in default_storage.listdir(submission_attachment_path)[0]:
        # `listdir` returns ([folders], [files]) ^
        try:
            folders_to_check.append(int(folder))
        except ValueError:
            # Folder name is not an int, therefore not a submission ID and can be deleted (an edge case)
            folders_to_delete.append(folder)

    # Get a list of all undeleted submissions that have a folder
    valid_ids = set(
        ApplicationSubmission.objects.filter(id__in=folders_to_check).values_list(
            "id", flat=True
        )
    )

    # Find the set difference and delete those folders
    folders_to_delete += list(set(folders_to_check) - valid_ids)

    for folder in folders_to_delete:
        try:
            delete_directory(f"{submission_attachment_path}/{folder}")
        except FileNotFoundError:
            # Will get thrown when unit tests attempt to run migrations
            pass


class Migration(migrations.Migration):
    dependencies = [
        ("funds", "0130_alter_applicationsubmission_status"),
    ]

    operations = [migrations.RunPython(delete_orphaned_attachments)]
